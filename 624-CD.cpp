/*

Problem: https://onlinejudge.org/index.php?option=onlinejudge&page=show_problem&problem=565

Ignacio Osorio
Cocobio2

Generated by Ignacio Osorio Wallace


*/
#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <cstdlib>
#include <algorithm>

using namespace std;

unsigned** create_dynamic_programming_table(unsigned x, unsigned y) {
	unsigned* data = (unsigned*) malloc(x*y*sizeof(unsigned));
	unsigned** table = (unsigned**) malloc(y*sizeof(unsigned*));

	for (int i=0; i<y; i++)
		table[i] = data+i*x;

	return table;
}

void clear_table(unsigned ** table) {
	free(table[0]);
	free(table);
}

int main() {
	string line;

	while (getline(cin, line) && line.size() != 0) {
		stringstream s(line);

		unsigned tape_length;
		unsigned track_n;
		vector<unsigned> track_times;
		unsigned tmp;

		s >> tape_length;
		s >> track_n;

		while (s >> tmp) track_times.push_back(tmp);

		// Create a table for memoization
		unsigned ** table = create_dynamic_programming_table(tape_length+1, track_times.size()+1);

		// Base case for dynamic programming solution
		for (int i=0; i<=tape_length; i++) table[track_times.size()][i] = i;

		// dynamic programming approach
		for (int i=track_times.size()-1; i>=0; i--) {
			for (unsigned j=0; j<=tape_length; j++) {
				unsigned included;
				unsigned not_included = table[i+1][j]; 
				unsigned tape_j = j-track_times[i];
				
				if (tape_j > tape_length) { // it gets cast to a unsigned so it cant be check if is less than 0
					table[i][j] = not_included;
				}
				else {
					included = table[i+1][tape_j];
					table[i][j] = min(included, not_included);
				}
			}
		}

		// Print results
		for (int i=0,j=tape_length; i<track_times.size(); i++) {
			unsigned tape_j = j-track_times[i];

			if (tape_j<=tape_length && table[i][j] == table[i+1][tape_j]) {
				cout << track_times[i] << " ";
				j = tape_j;
			}
		}

		cout << "sum:" << tape_length-table[0][tape_length];
		cout << endl;

		// Clear containers
		clear_table(table);
		track_times.clear();
	}

	return 0;
}
